// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/**
 * Les models de ma base de donnée PostgreSQL et les relations qui vont avec
 */

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  name      String
  role      Role
  resetToken  String?
  products  Product[] // Produits vendus
  orders    Order[] // Commandes passées
  reviews   Review[]
  addresses Address[]
  cart      Cart?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum Role {
  BUYER
  SELLER
  BUYER_AND_SELLER
  ADMIN
  BANNED
  RESTRICTED
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String
  price       Float
  stock       Int
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String
  seller      User        @relation(fields: [sellerId], references: [id])
  sellerId    String
  orderItems  OrderItem[]
  reviews     Review[]
  cartItems   CartItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
}

model Order {
  id         String      @id @default(uuid())
  buyer      User        @relation(fields: [buyerId], references: [id])
  buyerId    String
  items      OrderItem[]
  status     OrderStatus @default(PENDING)
  totalPrice Float
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(uuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELED
}

model Review {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
}

model Address {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  street    String
  city      String
  country   String
  zipCode   String
  createdAt DateTime @default(now())
}

model Cart {
  id     String     @id @default(uuid())
  user   User       @relation(fields: [userId], references: [id])
  userId String     @unique
  items  CartItem[]
}

model CartItem {
  id        String  @id @default(uuid())
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
}
